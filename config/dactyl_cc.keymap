#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//  ##########################################################
//  ###########        WORKING 2023/07/1       ###############
//  ##########################################################
// #############         LAYERS         #################

#define SYM_L   1
#define NAV_L   2
#define NAV2_L  3

//#define OTHER_L 4

#define DEFAULT 0
#define NAVIGATION   1
#define FUNCTION   2
#define NUMBERS  3
#define MOUSE  4
#define SYMBOLS 5
#define HOTKEYS  6

// Desktop and tab navigation shortcuts		

#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// NOT USED  &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))
// Generic bindings

#define KILL_WINDOW  LA(F4)
#define MAXIMIZE     LG(UP)
#define MINIMIZE     LG(DOWN)
#define UN_MINIMIZE  LG(LC(N))

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <500>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <300>;
};

&sl { release-after-ms = <2000>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        ZMK_MACRO(inv_qm,

        wait-ms = <10>;
        tap-ms = <10>;
        bindings =
            <&macro_press &kp LALT>,
            <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>,
            <&macro_release &kp LALT>;

        )
    };

    behaviors {
        //   td_mt_ls: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_LSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        //   };
        //   td_mt_rs: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_RSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt RSHIFT CAPSLOCK>, <&kp RCTRL>;
        //   };            
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC           &kp Q  &kp W        &kp E            &kp R        &kp T  &kp Y  &kp U  &kp I      &kp O     &kp P        &kp LEFT_BRACKET
&kp LEFT_CONTROL  &kp A  &kp S        &kp D            &kp F        &kp G  &kp H  &kp J  &kp K      &kp L     &kp SEMI     &kp SQT
&kp LSHIFT        &kp Z  &kp X        &kp C            &kp V        &kp B  &kp N  &kp M  &kp COMMA  &kp DOT   &kp FSLH     &kp RSHIFT
                         &kp GRAVE    &kp EXCLAMATION  &kp MINUS                         &kp EQUAL  &mo 1     &lt 2 SPACE
                         &lt 3 ENTER  &kp TAB          &lt 4 SPACE  &mo 5                &kp LGUI   &kp LALT  &kp RALT     &mo 6
            >;
        };

        NAVIGATION {
            bindings = <
&kp PRINTSCREEN  &none       &none             &none              &none     &none          &kp LG(X)  &kp HOME   &kp UP       &kp END        &kp LG(Y)       &kp BACKSPACE
&none            &kp LSHIFT  &kp LCTRL         &kp LALT           &kp LGUI  &kp BACKSPACE  &kp LG(C)  &kp LEFT   &kp DOWN     &kp RIGHT      &kp DELETE      &kp LG(A)
&none            &none       &none             &none              &none     &none          &kp LG(V)  &kp LG(Z)  &kp PAGE_UP  &kp PAGE_DOWN  &kp LG(A)       &kp INSERT
                             &kp LG(LA(LEFT))  &kp LG(LA(RIGHT))  &none                                          &none        &trans         &none
                             &none             &kp KP_NUMLOCK     &kp CAPS  &kp AT_SIGN                          &none        &none          &kp SCROLLLOCK  &kp C_PAUSE
            >;
        };

        FUNCTION {
            bindings = <
&bootloader  &none       &none      &none                 &none            &none       &bt BT_NXT  &kp F7  &kp F8    &kp F9  &kp F10               &bt BT_CLR
&none        &kp LSHIFT  &kp LCTRL  &kp LALT              &kp LGUI         &none       &bt BT_PRV  &kp F4  &kp F5    &kp F6  &kp F11               &bt BT_CLR_ALL
&none        &none       &none      &none                 &none            &none       &kp INS     &kp F1  &kp F2    &kp F3  &kp F12               &kp ASTRK
                         &none      &none                 &none                                            &kp SEMI  &none   &trans
                         &none      &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP  &kp K_MUTE                      &none     &none   &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN
            >;
        };

        NUMBERS {
            bindings = <
&none  &none      &none      &none     &none      &none   &kp GREATER_THAN  &kp N7        &kp N8        &kp N9        &kp COLON             &kp PERCENT
&none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none   &kp LESS_THAN     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&none  &none      &none      &none     &none      &none   &kp EQUAL         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH             &kp ASTERISK
                  &none      &none     &kp MINUS                                          &kp PLUS      &none         &none
                  &trans     &trans    &trans     &kp N0                                  &none         &none         &kp COMMA             &kp PERIOD
            >;
        };

        MOUSE {
            bindings = <
&none  &none  &none             &none              &none   &none  &none  &none  &none  &none  &none  &bootloader
&none  &none  &none             &none              &none   &none  &none  &none  &none  &none  &none  &none
&none  &none  &none             &none              &none   &none  &none  &none  &none  &none  &none  &none
              &kp LG(LA(LEFT))  &kp LG(LA(RIGHT))  &none                        &none  &none  &none
              &none             &none              &trans  &none                &none  &none  &none  &none
            >;
        };

        SYMBOLS {
            bindings = <
&kp CARET  &kp SQT         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp DOLLAR      &none  &none      &none         &none                 &none   &none
&kp HASH   &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE    &kp UNDERSCORE  &none  &kp EQUAL  &kp PLUS      &kp MINUS             &none   &none
&kp PIPE   &kp LESS_THAN   &kp EXCLAMATION       &kp COLON              &kp GREATER_THAN   &kp AT_SIGN     &none  &none      &none         &none                 &none   &trans
                           &kp AMPERSAND         &kp PERCENT            &none                                                &none         &kp NON_US_BACKSLASH  &trans
                           &kp SEMICOLON         &none                  &none              &trans                            &kp ASTERISK  &kp SLASH             &none   &none
            >;
        };

        HOTKEYS {
            bindings = <
&none   &none      &none       &none          &none          &none          &none          &none          &none             &kp LG(LA(O))  &trans      &kp RIGHT_BRACKET
&none   &kp LSHFT  &kp LCTRL   &none          &kp LG(LA(F))  &kp LC(LS(F))  &kp RA(F1)     &kp RG(N9)     &kp RA(F12)       &kp LG(LA(L))  &kp RS(N5)  &kp RS(NUMBER_2)
&trans  &none      &none       &kp LG(LA(C))  &kp LG(LA(V))  &none          &kp LG(LA(N))  &kp LG(LA(M))  &kp RS(NUMBER_6)  &kp RS(N7)     &none       &none
                   &kp LS(F9)  &kp LS(F10)    &none                                                       &none             &none          &none
                   &none       &none          &none          &none                                        &trans            &kp LG(SLASH)  &none       &trans
            >;
        };
    };
};
